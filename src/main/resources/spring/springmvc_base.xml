<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

	
	<!-- 配置Handler -->
	<!-- 1.实现Controller接口的Handler -->
	<bean id="itemsController" name="/queryItems0.action" class="org.bluesky.springmvc.controller.ItemsController" />
	<!-- 2.实现HttpRequestHandler接口的Handler -->
	<bean id="itemsHttpRequestController" class="org.bluesky.springmvc.controller.ItemsHttpRequestController" />
	<!-- 3.对于注解的Handler可以单个配置，实际开发中建议使用组件扫描 -->
	<!-- <bean class="org.bluesky.springmvc.controller.ItemsAnnotationController" /> -->
	<!-- 可以扫描使用@Controller、@Service、@Repository...注解的类
		  这里扫描controller，指定controller的包 -->
	<context:component-scan base-package="org.bluesky.springmvc.controller" />
	
	<!-- 如果未配置任何处理器映射器、处理器适配器和视图解析器
		  前端控制器将从Spring MVC的DispatcherSerlvet.properties文件中加载默认的处理映射器、适配器、视图解析器等组件 -->
	
	<!-- 处理器映射器
		  所有的映射器都实现HandlerMapping接口
		  多个映射器可以并存，前端控制器判断url能让哪些映射器映射，就让正确的映射器处理。 -->
	<!-- 1.beanName Url映射器
		  将bean的name作为url进行查找 ，配置Handler时需要指定beanname（就是url），不需要指定id -->
	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" />
	<!-- 2.简单url映射器
		  优点：对url映射进行统一配置
		  同一Handler可以配置多个url映射，配置Handler时不需要指定beanname（就是url），需要指定id -->
	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				<!-- 对Handler进行url映射，key为要配置的url映射地址，prop标签值为配置Handler时指定的id -->
				<prop key="/queryItems1.action">itemsController</prop>
				<prop key="/queryItems2.action">itemsController</prop>
				<prop key="/queryItems3.action">itemsHttpRequestController</prop>
			</props>
		</property>
	</bean>
	
	<!-- 处理器适配器
		  所有处理器适配器都实现 HandlerAdapter接口
		  多个适配器可以并存 -->
	<!-- 1.简单处理器适配器
		  要求编写的Handler实现 Controller接口 -->
	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
	<!-- 2.Http请求处理器适配器
		  要求编写的Handler实现 HttpRequestHandler接口
		  与原始servlet类似
		  优点：可以通过修改response，设置响应的数据格式，比如响应json数据 -->
	<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"/>
	
	<!-- 基于注解的注解映射器和注解适配器
		  注意：注解的映射器和注解的适配器必须配对使用，而非注解的的映射器和非注解的适配器不须配对使用 -->
	<!-- 3.注解映射器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" /> -->
	<!-- 3.注解适配器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" /> -->
	<!-- 4.mvc:annotation-driven代替注解映射器和注解适配器配置
		 mvc:annotation-driven默认加载很多的参数绑定方法，比如默认加载了json转换解析器
		  如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
		  实际开发时使用mvc:annotation-driven -->
	<!--
	<mvc:annotation-driven></mvc:annotation-driven>
	-->
	<!-- 5.配置自定义参数绑定之后的注解驱动器配置 -->
	<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>
	
	<!-- 视图解析器
		  解析jsp解析，默认使用jstl标签，classpath下的需要有jstl的包 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 自定义参数绑定 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器 -->
		<property name="converters">
			<list>
				<!-- 日期类型转换 -->
				<bean class="org.bluesky.springmvc.controller.converter.CustomDateConverter"/>
			</list>
		</property>
	</bean>
</beans>